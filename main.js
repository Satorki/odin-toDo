/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//LIST CREATE\nclass List {\n  taskList = [];\n  constructor(id, title, description) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n  }\n  addTask(task) {\n    this.taskList.push(task);\n  }\n  showTasks() {\n    return this.taskList;\n  }\n}\n//TASK CREATE\nclass Task {\n  constructor(id, name, description, date, priority) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.date = date;\n    this.priority = priority;\n  }\n}\n\n//LIST AND TASK WITH ID\nfunction IdGenerator() {\n  let id = 1;\n  function generateId() {\n    return id++;\n  }\n\n  function listWithId(title, description) {\n    return new List(generateId(), title, description);\n  }\n\n  function taskWithId(name, description, date, priority) {\n    return new Task(generateId(), name, description, date, priority);\n  }\n\n  return { listWithId, taskWithId };\n}\n\n//MODAL SHOW\nfunction Modal() {\n  const selectors = {\n    modalAddTaskBtn: document.querySelector(\"#modalAddTaskBtn\"),\n    modalAddListBtn: document.querySelector(\"#modalAddListBtn\"),\n    backBtnList: document.querySelector(\"#backBtnList\"),\n    backBtnTask: document.querySelector(\"#backBtnTask\"),\n    dialog: document.querySelector(\"dialog\"),\n    modalList: document.querySelector(\"#modalList\"),\n    modalTask: document.querySelector(\"#modalTask\"),\n  };\n  function showModal() {\n    document.addEventListener(\"click\", (e) => {\n      if (e.target === selectors.modalAddListBtn) {\n        selectors.modalList.showModal();\n      } else if (e.target === selectors.modalAddTaskBtn) {\n        selectors.modalTask.showModal();\n      }\n    });\n  }\n  function closeModal() {\n    selectors.backBtnList.addEventListener(\"click\", () => {\n      selectors.modalList.close();\n    });\n    selectors.backBtnTask.addEventListener(\"click\", () => {\n      selectors.modalTask.close();\n    });\n  }\n\n  return { showModal, closeModal };\n}\nconst modal = Modal();\nmodal.showModal();\nmodal.closeModal();\n\nconst ids = IdGenerator();\n\n//LIST SHOW\nfunction ListBehaviours() {\n  const selectors = {\n    deleteListBtn: document.querySelector(\"#deleteListBtn\"),\n    addListBtn: document.querySelector(\"#addListBtn\"),\n    listField: document.querySelector(\"#listField ul\"),\n    listName: document.querySelector(\"#listName\"),\n    listDescription: document.querySelector(\"#listDescriptionArea\"),\n    backBtnList: document.querySelector(\"#backBtnList\"),\n  };\n  const completedList = [];\n\n  function createList() {\n    return ids.listWithId(\n      selectors.listName.value,\n      selectors.listDescription.value\n    );\n  }\n  function saveList() {\n    completedList.push(createList());\n    return completedList;\n  }\n\n  function addList() {\n    selectors.addListBtn.addEventListener(\"click\", () => {\n      saveList();\n      generateList();\n      toggleDescriptionShow();\n      pickUpList();\n      toggleDeleteList();\n      deleteList();\n    });\n  }\n\n  function generateList() {\n    selectors.listField.textContent = \"\";\n    completedList.forEach((element) => {\n      const listElementsAdd = {\n        li1: document.createElement(\"li\"),\n        li2: document.createElement(\"li\"),\n        span1: document.createElement(\"span\"),\n        span2: document.createElement(\"span\"),\n        span3: document.createElement(\"span\"),\n      };\n      listElementsAdd.span1.textContent = \"✗\";\n      listElementsAdd.span1.classList.add(\"deleteList\");\n      listElementsAdd.span2.textContent = element.title;\n      listElementsAdd.span2.classList.add(\"spanLink\");\n      listElementsAdd.span2.setAttribute(\"id\", \"listTitle\");\n      listElementsAdd.span3.textContent = \" ...\";\n      listElementsAdd.span3.setAttribute(\"id\", \"listDescriptionBtn\");\n      listElementsAdd.span3.classList.add(\"spanLink\");\n      listElementsAdd.li2.textContent = element.description;\n      listElementsAdd.li2.setAttribute(\"id\", \"listDescription\");\n      listElementsAdd.li2.classList.add(\"description\");\n\n      selectors.listField.appendChild(listElementsAdd.li1);\n      listElementsAdd.li1.appendChild(listElementsAdd.span1);\n      listElementsAdd.li1.appendChild(listElementsAdd.span2);\n      listElementsAdd.li1.appendChild(listElementsAdd.span3);\n      selectors.listField.appendChild(listElementsAdd.li2);\n    });\n  }\n\n  function pickUpList() {\n    const listTitleMain = document.querySelector(\"#listTitleMain\");\n    const titleH2 = document.createElement(\"h2\");\n    document.querySelectorAll(\"#listTitle\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        listTitleMain.textContent = \"\";\n        listTitleMain.appendChild(titleH2);\n        titleH2.textContent = element.textContent;\n      });\n    });\n  }\n\n  function toggleDescriptionShow() {\n    document.querySelectorAll(\"#listDescriptionBtn\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        if (\n          element.closest(\"li\").nextElementSibling.style.display === \"block\"\n        ) {\n          element.closest(\"li\").nextElementSibling.style.display = \"none\";\n        } else {\n          element.closest(\"li\").nextElementSibling.style.display = \"block\";\n        }\n      });\n    });\n  }\n\n  function toggleDeleteList() {\n    let temp = 0;\n    selectors.deleteListBtn.addEventListener(\"click\", () => {\n      if (temp === 0) {\n        document.querySelectorAll(\".deleteList\").forEach((element) => {\n          element.style.display = \"block\";\n        });\n        temp = 1;\n      } else {\n        document.querySelectorAll(\".deleteList\").forEach((element) => {\n          element.style.display = \"none\";\n        });\n        temp = 0;\n      }\n    });\n  }\n\n  function deleteList() {\n    document.querySelectorAll(\".deleteList\").forEach((deleteButton, index) => {\n      deleteButton.addEventListener(\"click\", () => {\n        completedList.splice(index, 1);\n        generateList();\n        document.querySelectorAll(\".deleteList\").forEach((element) => {\n          element.style.display = \"block\";\n        });\n        deleteList();\n        toggleDescriptionShow();\n      });\n    });\n  }\n\n  return { createList, addList };\n}\n\nconst mainList = ListBehaviours();\nmainList.createList();\nmainList.addList();\n\n/////////////////////////////////////////////////\n\nfunction TaskBehaviours() {\n  const selectors = {\n    taskName: document.querySelector(\"#taskName\"),\n    taskDescription: document.querySelector(\"#taskDescriptionInput\"),\n    taskDueDate: document.querySelector(\"#taskDueDateInput\"),\n    priorityButtons: document.querySelectorAll(\".priorityButtons button\"),\n    addTaskBtn: document.querySelector(\"#addTaskBtn\"),\n    backBtnTask: document.querySelector(\"#backBtnTask\"),\n    taskField: document.querySelector(\"#taskField ul\"),\n    deleteTaskBtn: document.querySelector(\"#deleteTaskBtn\"),\n  };\n\n  let poriorityChosed;\n  function poriorityCheck() {\n    selectors.priorityButtons.forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        selectors.priorityButtons.forEach(\n          (button) => (button.style.color = \"white\")\n        );\n        element.style.color = \"red\";\n        poriorityChosed = element.textContent;\n      });\n    });\n    return poriorityChosed;\n  }\n\n  function createTask() {\n    return ids.taskWithId(\n      selectors.taskName.value,\n      selectors.taskDescription.value,\n      selectors.taskDueDate.value,\n      poriorityChosed\n    );\n  }\n\n  const taskList = [];\n  function addTask() {\n    selectors.addTaskBtn.addEventListener(\"click\", () => {\n      taskList.push(createTask());\n      generateTask();\n      doneTask();\n      toggleDescriptionShow();\n      toggleDeleteTask();\n    });\n    return taskList;\n  }\n\n  function generateTask() {\n    selectors.taskField.textContent = \"\";\n    taskList.forEach((element) => {\n      const taskElementsAdd = {\n        li1: document.createElement(\"li\"),\n        div1: document.createElement(\"div\"),\n        span1: document.createElement(\"span\"),\n        span2: document.createElement(\"span\"),\n        span3: document.createElement(\"span\"),\n        div2: document.createElement(\"div\"),\n        span4: document.createElement(\"span\"),\n        span5: document.createElement(\"span\"),\n        li2: document.createElement(\"li\"),\n      };\n      taskElementsAdd.span1.textContent = \"✗ \";\n      taskElementsAdd.span1.classList.add(\"deleteTask\");\n      taskElementsAdd.span2.textContent = \"✔ \";\n      taskElementsAdd.span2.classList.add(\"spanLink\");\n      taskElementsAdd.span2.setAttribute(\"id\", \"checkTask\");\n      taskElementsAdd.span3.textContent = element.name;\n\n      taskElementsAdd.span4.setAttribute(\"id\", \"taskDueDate\");\n      taskElementsAdd.span4.textContent = element.date;\n      taskElementsAdd.span5.classList.add(\"spanLink\");\n      taskElementsAdd.span5.setAttribute(\"id\", \"taskDescriptionBtn\");\n      taskElementsAdd.span5.textContent = \" ...\";\n\n      taskElementsAdd.li2.textContent = element.description;\n      taskElementsAdd.li2.setAttribute(\"id\", \"taskDescription\");\n      taskElementsAdd.li2.classList.add(\"description\");\n\n      selectors.taskField.appendChild(taskElementsAdd.li1);\n      taskElementsAdd.li1.appendChild(taskElementsAdd.div1);\n      taskElementsAdd.div1.appendChild(taskElementsAdd.span1);\n      taskElementsAdd.div1.appendChild(taskElementsAdd.span2);\n      taskElementsAdd.div1.appendChild(taskElementsAdd.span3);\n      taskElementsAdd.li1.appendChild(taskElementsAdd.div2);\n      taskElementsAdd.div2.appendChild(taskElementsAdd.span4);\n      taskElementsAdd.div2.appendChild(taskElementsAdd.span5);\n      selectors.taskField.appendChild(taskElementsAdd.li2);\n    });\n  }\n  function toggleDescriptionShow() {\n    document.querySelectorAll(\"#taskDescriptionBtn\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        if (\n          element.closest(\"li\").nextElementSibling.style.display === \"block\"\n        ) {\n          element.closest(\"li\").nextElementSibling.style.display = \"none\";\n        } else {\n          element.closest(\"li\").nextElementSibling.style.display = \"block\";\n        }\n      });\n    });\n  }\n\n  function doneTask() {\n    document.querySelectorAll(\"#checkTask\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        if (element.nextElementSibling.className !== \"\") {\n          element.nextElementSibling.classList.remove(\"done\")\n        } else {\n          element.nextElementSibling.classList.add(\"done\")\n        }\n      });\n    });\n  }\n\n  function toggleDeleteTask() {\n    let temp = 0;\n    selectors.deleteTaskBtn.addEventListener(\"click\", () => {\n      if (temp === 0) {\n        document.querySelectorAll(\".deleteTask\").forEach((element) => {\n          element.style.display = \"inline-block\";\n        });\n        temp = 1;\n      } else {\n        document.querySelectorAll(\".deleteTask\").forEach((element) => {\n          element.style.display = \"none\";\n        });\n        temp = 0;\n      }\n    });\n  }\n\n  return { poriorityCheck, addTask };\n}\n\nconst mainTasks = TaskBehaviours();\nmainTasks.poriorityCheck();\nmainTasks.addTask();\n\n\n//# sourceURL=webpack://odin-todo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;