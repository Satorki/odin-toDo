/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//LIST CREATE\nclass List {\n  taskList = [];\n  constructor(id, title, description) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n  }\n  addTask(task) {\n    this.taskList.push(task);\n  }\n  showTasks() {\n    return this.taskList;\n  }\n}\n//TASK CREATE\nclass Task {\n  constructor(id, name, description, date, priority) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.date = date;\n    this.priority = priority;\n  }\n}\n\n//LIST AND TASK WITH ID\nfunction IdGenerator() {\n  let id = 1;\n  function generateId() {\n    return id++;\n  }\n\n  function listWithId(title, description) {\n    return new List(generateId(), title, description);\n  }\n\n  function taskWithId(name, description, date, priority) {\n    return new Task(generateId(), name, description, date, priority);\n  }\n\n  return { listWithId, taskWithId };\n}\n\n//MODAL SHOW\nfunction Modal() {\n  const selectors = {\n    modalAddTaskBtn: document.querySelector(\"#modalAddTaskBtn\"),\n    modalAddListBtn: document.querySelector(\"#modalAddListBtn\"),\n    backBtnList: document.querySelector(\"#backBtnList\"),\n    backBtnTask: document.querySelector(\"#backBtnTask\"),\n    dialog: document.querySelector(\"dialog\"),\n    modalList: document.querySelector(\"#modalList\"),\n    modalTask: document.querySelector(\"#modalTask\"),\n  };\n  function showModal() {\n    document.addEventListener(\"click\", (e) => {\n      if (e.target === selectors.modalAddListBtn) {\n        selectors.modalList.showModal();\n      } else if (e.target === selectors.modalAddTaskBtn) {\n        selectors.modalTask.showModal();\n      }\n    });\n  }\n  function closeModal() {\n    selectors.backBtnList.addEventListener(\"click\", () => {\n      selectors.modalList.close();\n    });\n    selectors.backBtnTask.addEventListener(\"click\", () => {\n      selectors.modalTask.close();\n    });\n  }\n\n  return { showModal, closeModal };\n}\nconst modal = Modal();\nmodal.showModal();\nmodal.closeModal();\n\nconst ids = IdGenerator();\n\n//LIST SHOW\nfunction ListBehaviours() {\n  const selectors = {\n    deleteListBtn: document.querySelector(\"#deleteListBtn\"),\n    addListBtn: document.querySelector(\"#addListBtn\"),\n    listField: document.querySelector(\"#listField ul\"),\n    listName: document.querySelector(\"#listName\"),\n    listDescription: document.querySelector(\"#listDescriptionArea\"),\n    backBtnList: document.querySelector(\"#backBtnList\"),\n  };\n  const completedList = [];\n\n  function createList() {\n    return ids.listWithId(\n      selectors.listName.value,\n      selectors.listDescription.value\n    );\n  }\n  function saveList() {\n    completedList.push(createList());\n    return completedList;\n  }\n  function addList() {\n    selectors.addListBtn.addEventListener(\"click\", () => {\n      saveList();\n      generateList();\n      toggleDescriptionShow();\n      pickUpList();\n      toggleDeleteList();\n    });\n  }\n\n  function generateList() {\n    selectors.listField.textContent = \"\";\n    completedList.forEach((element) => {\n      const listElementsAdd = {\n        li1: document.createElement(\"li\"),\n        li2: document.createElement(\"li\"),\n        span1: document.createElement(\"span\"),\n        span2: document.createElement(\"span\"),\n        span3: document.createElement(\"span\"),\n      };\n      listElementsAdd.span1.textContent = \"âœ—\";\n      listElementsAdd.span1.classList.add(\"deleteList\");\n      listElementsAdd.span2.textContent = element.title;\n      listElementsAdd.span2.classList.add(\"spanLink\");\n      listElementsAdd.span2.setAttribute(\"id\", \"listTitle\");\n      listElementsAdd.span3.textContent = \" ...\";\n      listElementsAdd.span3.setAttribute(\"id\", \"listDescriptionBtn\");\n      listElementsAdd.span3.classList.add(\"spanLink\");\n      listElementsAdd.li2.textContent = element.description;\n      listElementsAdd.li2.setAttribute(\"id\", \"listDescription\");\n      listElementsAdd.li2.classList.add(\"listDescription\");\n\n      selectors.listField.appendChild(listElementsAdd.li1);\n      listElementsAdd.li1.appendChild(listElementsAdd.span1);\n      listElementsAdd.li1.appendChild(listElementsAdd.span2);\n      listElementsAdd.li1.appendChild(listElementsAdd.span3);\n      selectors.listField.appendChild(listElementsAdd.li2);\n    });\n  }\n\n  function pickUpList() {\n    const listTitleMain = document.querySelector(\"#listTitleMain\");\n    const titleH2 = document.createElement(\"h2\");\n    document.querySelectorAll(\"#listTitle\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        listTitleMain.textContent = \"\";\n        listTitleMain.appendChild(titleH2);\n        titleH2.textContent = element.textContent;\n      });\n    });\n  }\n\n  function toggleDescriptionShow() {\n    document.querySelectorAll(\"#listDescriptionBtn\").forEach((element) => {\n      element.addEventListener(\"click\", () => {\n        if (\n          element.closest(\"li\").nextElementSibling.style.display === \"block\"\n        ) {\n          element.closest(\"li\").nextElementSibling.style.display = \"none\";\n        } else {\n          element.closest(\"li\").nextElementSibling.style.display = \"block\";\n        }\n      });\n    });\n  }\n\n  function toggleDeleteList() {\n    let temp = 0;\n    selectors.deleteListBtn.addEventListener(\"click\", () => {\n      if (temp === 0) {\n        document.querySelectorAll(\".deleteList\").forEach((element) => {\n          element.style.display = \"block\";\n        });\n        temp = 1;\n      } else {\n        document.querySelectorAll(\".deleteList\").forEach((element) => {\n          element.style.display = \"none\";\n        });\n        temp = 0;\n      }\n    });\n  }\n\n  // function deleteList() {\n  //   document.querySelectorAll(\".deleteList\").forEach((deleteButton, index) => {\n  //     deleteButton.addEventListener(\"click\", () => {\n  //       completedList.splice(index, 1);\n  //     });\n  //   });\n  // }\n\n  function showList() {\n    selectors.backBtnList.addEventListener(\"click\", () => {\n      generateList();\n      toggleDescriptionShow();\n      pickUpList();\n      toggleDeleteList();\n      //deleteList();\n    });\n  }\n\n  return { createList, addList, showList };\n}\n\nconst mainList = ListBehaviours();\nmainList.createList();\nmainList.addList();\nmainList.showList();\n\n\nfunction TaskBehaviours() {\n  const selectors = {\n    priorityButtons: document.querySelectorAll(\".priorityButtons button\")\n  }\n\n  selectors.priorityButtons.forEach((element)  => {\n    element.addEventListener(\"click\", () => {\n      selectors.priorityButtons.forEach(button => button.style.color = \"white\");\n      element.style.color = \"red\"; \n    })\n  })\n}\n\nTaskBehaviours();\n\n//# sourceURL=webpack://odin-todo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;